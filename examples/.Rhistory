}
l[[i]]<-r
}
return(l)
}
make_variable_list<-function(length){
l<-list()
for(i in 1:length){
l[[i]]<-adinr$variable()
}
return(l)
}
setwd("/Users/mattadmin/ADinR/examples")
load("catch_at_age.RData")
nyears<-om_input[["nyr"]]
nages<-om_input[["nages"]]
#DATA
age_composition<-em_input[["L.age.obs"]][["fleet1"]]
observed_catch_abundance<-em_input[["L.obs"]][["fleet1"]]
cv<-em_input[["cv.L"]][["fleet1"]]
empirical_waa<-om_input[["W.kg"]]
#PARAMETERS
#beverton-holt recruitment model
log_R0<-adinr$variable()
log_R0$set_value(log(1e+06))
# log_R0$bounds(log(1e+04),log(1e+07))
h<-adinr$variable()
h$set_value(om_input[["h"]])
recruitment_deviation<-list()
for(i in 1:nyears){
recruitment_deviation[[i]]<-adinr$variable()
recruitment_deviation[[i]]$set_value(0.5)
recruitment_deviation[[i]]$bounds(-10,10)
}
#virgin spawning biomass
log_S0<-adinr$variable()
log_S0$set_value(log(9557.836))
#initial numbers
initial_numbers<-list()
for(i in 1:nages){
initial_numbers[[i]]<-adinr$variable()
initial_numbers[[i]]$set_value(1e+04)
}
initial_deviations<-list()
for(i in 1:nages){
initial_deviations[[i]]<-adinr$parameter()
initial_deviations[[i]]$set_value(0.5)
}
#logistic selectivity
slope<-adinr$parameter()
slope$set_value(om_input[["sel_fleet"]][["fleet1"]][["slope.sel"]])
slope$bounds(0.0001,nages)
a50<-adinr$parameter()
a50$set_value(om_input[["sel_fleet"]][["fleet1"]][["A50.sel"]])
a50$bounds(0.0001,nages)
#fishing mortality
fishing_mortality<-list()
for(i in 1:nyears){
fishing_mortality[[i]]<-adinr$variable()
fishing_mortality[[i]]$set_value(0.5)
fishing_mortality[[i]]$bounds(0.001,4.00)
}
#natural mortality
natural_mortality<-list()
for(i in 1:nages){
natural_mortality[[i]]<-adinr$variable()
natural_mortality[[i]]$set_value(om_input[["M"]])
}
#maturity
maturity<-list()
for(i in 1:nages){
maturity[[i]]<-adinr$variable()
maturity[[i]]$set_value(om_input[["mat.age"]][[i]])
}
#derived quantities
N<-make_nested_variable_list(nyears,nages)
#spawining stock biomass at age
spawning_biomass_at_age<-make_nested_variable_list(nyears,nages)
#spawining stock biomass
SSB<-list()
for(i in 1:nyears){
SSB[[i]]<-adinr$variable()
}
#recruitment
recruitment<-list()
for(i in 1:nyears){
recruitment[[i]]<-adinr$variable()
}
#total mortality
Z<-make_nested_variable_list(nyears,nages)
#survival rate
S<-make_nested_variable_list(nyears,nages)
#f at age
f_at_age<-make_nested_variable_list(nyears,nages)
#catch at age
C<-make_nested_variable_list(nyears,nages)
#computed age composition
predicted_age_composition<-make_nested_variable_list(nyears,nages)
#computed catch abundance
predicted_catch_abundance<-make_variable_list(nyears)
adinr$set_recording(TRUE)
#STATISTICAL CATCH AT AGE MODEL
reset_ssb<-function(){
for(i in 1:nyears){
SSB[[i]]$set_value(0.0)
}
}
get_selectivity<-function(age){
return((1.0) / ((1.0) + exp(-1.0 * (om_input[["ages"]][[age]] - a50) / slope)))
}
get_recruitment<-function(SB0, sb){
return(( 4.0 * h * exp(log_R0) * sb) / (SB0*(1.0 - h) + sb * (5.0 * h - 1.0)))
}
calculate_mortality<-function(year,age){
Z[[year]][[age]]<<-(fishing_mortality[[year]]*get_selectivity(age)+natural_mortality[[age]])
f_at_age[[year]][[age]]<<-fishing_mortality[[year]]*get_selectivity(age)
S[[year]][[age]]<<-exp(-1.0*Z[[year]][[age]])
}
calculate_numbers_at_age<-function(year,age){
if(year == 1){
N[[year]][[age]]<<-(initial_numbers[[age]]) + initial_deviations[[age]]
}else{
if(age > 1){
N[[year]][[age]]<<-(N[[year-1]][[age-1]]*exp(-1.0 * Z[[year-1]][[age-1]]))
}
if(age == nages){
N[[year]][[age]]<<-(N[[year]][[age]] + N[[year]][[age-1]] * exp(-1.0 * Z[[year]][[age-1]]))
}
}
}
calculate_spawning_biomass<-function(year,age){
SSB[[year]]<<-(SSB[[year]]+(exp(-1.0 * Z[[year]][[age]]))*N[[year]][[age]])
}
calculate_recruitment<-function(year){
if(year == 1){
recruitment[[year]]<<-initial_numbers[[1]]
}else{
recruitment[[year]]<<-get_recruitment(exp(log_S0),SSB[[year]])+recruitment_deviation[[year]]
}
N[[year]][[1]]<<-recruitment[[year]]#first age group
}
calculate_catch_at_age<-function(year,age){
C[[year]][[age]]<<-N[[year]][[age]]*f_at_age[[year]][[age]]*(1.0-exp(-1.0*Z[[year]][[age]]))/((Z[[year]][[age]]))
# C[[year]][[age]]<<-N[[year]][[age]]*(f_at_age[[year]][[age]]/(Z[[year]][[age]] + maturity[[age]]))*(1.0-exp(-1.0*Z[[year]][[age]]-maturity[[age]]))
}
calculate_catch_composition<-function(){
for(y in 1:(nyears)){
sum<-adinr$variable()
for(a in 1:nages){
sum<-sum+C[[y]][[a]]
}
for(a in 1:nages){
predicted_age_composition[[y]][[a]]<<-C[[y]][[a]]/sum
}
}
}
calculate_catch_abundance<-function(){
for(y in 1:(nyears)){
for(a in 1:nages){
predicted_catch_abundance[[y]]<<-predicted_catch_abundance[[y]]+C[[y]][[a]]*empirical_waa[[a]]
}
}
}
calculate_catch_likelihood<-function(){
l<-adinr$variable()
for(i in 1:nyears){
obs<-observed_catch_abundance[i]
predicted<-predicted_catch_abundance[[i]]
l<-l+(-1.0*log(cv)-0.5*pow((((log(obs) - log(predicted))/predicted)),2.0))
}
return(l)
}
calculate_index_of_abundance_likelihood<-function(){
l<-adinr$variable()
sample_size<-em_input[["n.L"]][["fleet1"]]
for(i in 1:nyears){
p<-adinr$variable()
for(j in 1:nages){
obs<-age_composition[i,j]
predicted<-predicted_age_composition[[i]][[j]]+1e-8
p<-p + obs*log(predicted)
}
l<-l+sample_size*p
}
return(l)
}
objective_function<-function(){
reset_ssb()
for(y in 1:(nyears)){
calculate_recruitment(y)
for(a in 1:nages){
calculate_mortality(y,a)
calculate_numbers_at_age(y,a)
calculate_spawning_biomass(y,a)
calculate_catch_at_age(y,a)
}
}
calculate_catch_composition()
calculate_catch_abundance()
n1<-calculate_catch_likelihood()
n2<-calculate_index_of_abundance_likelihood()
print(n1$value())
print(n2$value())
likelihood<- n1+n2
return(likelihood)
}
f<-objective_function()
adinr$parameter_values()
#fit the model
results<-adinr$minimize()
results
adinr$clear()
library(Rcpp)
library(nloptr)
library(ADinR)
#load the adinr module
adinr<-Rcpp::Module("adinr", PACKAGE="ADinR")
#data
x<-c(0.1,0.7,1.3,1.9,2.5,3.1,3.7,4.3,4.9,5.5,
6.1,6.7,7.3,7.9,8.5,9.1,9.7,10.3,10.9,11.5,
12.1,12.7,13.3,13.9,14.5,15.1,15.7,16.3,16.9
,17.5,18.1,18.7,19.3,19.9)
y<-c(6.14013, 10.9014, 16.2082, 23.6577, 31.8638,
39.0495, 55.0857, 76.672, 88.3729, 106.488, 135.407,
161.65, 191.835, 216.537, 245.388, 280.615, 322.005,
356.254, 396.094, 448.594, 487.619, 532.935, 592.197,
644.919, 692.429, 756.265, 810.315, 873.324, 936.509,
997.534, 1070.68, 1144.18, 1212.92, 1284.21)
nobs<-length(x)
#independent variables
a<-adinr$parameter()
a$set_value(0.0)
k<-adinr$parameter()
k$set_value(0.0)
adinr$set_recording(TRUE)
#objective function
norm2<-adinr$variable()
predicted <- c(1:length(x))
for(i in 1:nobs){
pred_Y<- a * exp(k * x[i])
norm2<-norm2 + pow(y[i]-pred_Y,2.0)
}
f<-(nobs/2.0) * log(norm2)
#minimize the objective function
results<-adinr$minimize()
for(i in 1:nobs){
pred_Y<-pred_Y<- a * exp(k * x[i])
predicted[i]<-pred_Y$value()
}
plot.new()
plot(x=x, y=y)
lines(x,predicted)
adinr$clear()
results
library(Rcpp)
library(nloptr)
library(ADinR)
#load the adinr module
adinr<-Rcpp::Module("adinr", PACKAGE="ADinR")
#data
x<-c(0.1,0.7,1.3,1.9,2.5,3.1,3.7,4.3,4.9,5.5,
6.1,6.7,7.3,7.9,8.5,9.1,9.7,10.3,10.9,11.5,
12.1,12.7,13.3,13.9,14.5,15.1,15.7,16.3,16.9
,17.5,18.1,18.7,19.3,19.9)
y<-c(6.14013, 10.9014, 16.2082, 23.6577, 31.8638,
39.0495, 55.0857, 76.672, 88.3729, 106.488, 135.407,
161.65, 191.835, 216.537, 245.388, 280.615, 322.005,
356.254, 396.094, 448.594, 487.619, 532.935, 592.197,
644.919, 692.429, 756.265, 810.315, 873.324, 936.509,
997.534, 1070.68, 1144.18, 1212.92, 1284.21)
nobs<-length(x)
#independent variables
a<-adinr$parameter()
a$set_value(0.0)
k<-adinr$parameter()
k$set_value(0.0)
adinr$set_recording(TRUE)
#objective function
norm2<-adinr$variable()
predicted <- c(1:length(x))
for(i in 1:nobs){
pred_Y<- a * exp(k * x[i])
norm2<-norm2 + pow(y[i]-pred_Y,2.0)
}
f<-(nobs/2.0) * log(norm2)
#minimize the objective function
results<-adinr$minimize()
for(i in 1:nobs){
pred_Y<-pred_Y<- a * exp(k * x[i])
predicted[i]<-pred_Y$value()
}
plot.new()
plot(x=x, y=y)
lines(x,predicted)
adinr$clear()
results
library(Rcpp)
library(nloptr)
library(ADinR)
#load the adinr module
adinr<-Rcpp::Module("adinr", PACKAGE="ADinR")
#data
x<-c(0.1,0.7,1.3,1.9,2.5,3.1,3.7,4.3,4.9,5.5,
6.1,6.7,7.3,7.9,8.5,9.1,9.7,10.3,10.9,11.5,
12.1,12.7,13.3,13.9,14.5,15.1,15.7,16.3,16.9
,17.5,18.1,18.7,19.3,19.9)
y<-c(6.14013, 10.9014, 16.2082, 23.6577, 31.8638,
39.0495, 55.0857, 76.672, 88.3729, 106.488, 135.407,
161.65, 191.835, 216.537, 245.388, 280.615, 322.005,
356.254, 396.094, 448.594, 487.619, 532.935, 592.197,
644.919, 692.429, 756.265, 810.315, 873.324, 936.509,
997.534, 1070.68, 1144.18, 1212.92, 1284.21)
nobs<-length(x)
#independent variables
a<-adinr$parameter()
a$set_value(0.0)
k<-adinr$parameter()
k$set_value(0.0)
adinr$set_recording(TRUE)
#objective function
norm2<-adinr$variable()
predicted <- c(1:length(x))
for(i in 1:nobs){
pred_Y<- a * exp(k * x[i])
norm2<-norm2 + pow(y[i]-pred_Y,2.0)
}
f<-(nobs/2.0) * log(norm2)
#minimize the objective function
results<-adinr$minimize()
for(i in 1:nobs){
pred_Y<-pred_Y<- a * exp(k * x[i])
predicted[i]<-pred_Y$value()
}
plot.new()
plot(x=x, y=y)
lines(x,predicted)
adinr$clear()
results
source("surplus_production.R")
quit
quit()
source("exponential.R")
quit()
source("exponential.R")
source("exponential.R")
adinr$clear()
adinr$clear()
source("exponential.R")
length(x)
length(y)
adinr$clear()
source("exponential.R")
adinr$clear()
source("exponential.R")
quit()
source("gompertz.R")
source("gompertz.R")
quit()
source("gompertz.R")
results
source("gompertz.R")
quit()
source("gompertz.R")
quit()
source("gompertz.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("surplus_production.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("bounded.R")
source("bounded.R")
source("bounded.R")
quit()
source("bounded.R")
quit()
source("bounded.R")
quit()
source("bounded.R")
quit()
source("bounded.R")
source("bounded.R")
quit()
source("bounded.R")
quit()
source("catch_at_age.R")
print(predicted_age_composition)
print(predicted_age_composition[[1]][[2]]$value())
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
exp(84.9132513)
em_input[["L.obs"]][["fleet1"]]
om_input[["W.kg"]]
quit()
om_input[["W.kg"]]
source("catch_at_age.R")
om_input[["W.kg"]]
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
for(y in 1:nyears) predicted_catch_abundance[[y]]
for(y in 1:nyears) {print(predicted_catch_abundance[[y]]$value()}
for(y in 1:nyears) {print(predicted_catch_abundance[[y]]$value())}
for(y in 1:nyears) {print(recruitment[[y]]$value())}
exp(log_R0)
exp(log_R0)$value()
log_R0$value()
om_output[["SSB"]]
for(y in 1:nyears) {print(SSB[[y]]$value())}
quit()
source("catch_at_age.R")
quit()
source("catch_at_age.R")
for(y in 1:nyears) {print(SSB[[y]]$value())}
quit()
for(y in 1:nyears) {print(SSB[[y]]$value())}
source("catch_at_age.R")
quit()
source("catch_at_age.R")
source("catch_at_age.R")
quit()
source("rosenbrock.R")
source("rosenbrock.R")
source("rosenbrock.R")
quit()
